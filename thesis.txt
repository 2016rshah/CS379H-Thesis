Rushi will be talking about his work under Professor Isil Dillig on program synthesis for database-driven web applications. In particular, he will discuss code migration (Migrator @ PLDI'19) and data migration (Dynamite @ VLDB'20) in the face of database schema refactorings. 


	programming languages (specifically program synthesis for database-driven web applications) 

	I started research three years ago with Professor Isil Dillig in UT's Program Analysis Research Group (UToPiA). My work with UToPiA has focused primarily on automating web application developer tasks created when the application's underlying database schema is refactored. These schemas are generally refactored to improve performance or maintainability, but doing so creates two programmer tasks: code migration and data migration. Our research automates both tasks for developers. Our first research result for code migration appeared at Programming Languages Design and Implementation 2019 [1] and our second research result for data migration is currently in submission at the Conference on Very Large Databases 2020 [2].

	The first programmer task, code migration, refers to the program changes that need to be made to the application to preserve functionality in the face of a new database schema. These changes are tedious and error prone when done by hand. In contrast, we implemented a fully automated solution called Migrator that takes as input the old program, old schema, and new schema, and synthesizes a new program that is verifiably equivalent to the old program. We were able to successfully synthesize new programs in ten examples collected from textbooks on the subject and ten real world Ruby on Rails applications collected from GitHub. My role in this project was primarily to evaluate our tool against the previous state of the art, so I re-implemented our approach in a popular synthesis framework called Sketch. My experiments showed that Sketch failed to synthesize a majority of the benchmarks, and furthermore showed that our tool works 1,700 times faster on the benchmarks Sketch actually completes.

	The second programmer task, data migration, refers to bringing existing data from the old database to the new database in a way that respects the schema change. Prior work has addressed this goal in restricted formats, for example schema refactorings within one database format (relational format to relational format) or across specific formats (document format to relational format only). But our work, called Dynamite, frames the generalized version of the problem as a Datalog program synthesis problem. Using the internal representation we developed, we can infer a schema mapping between database schemas regardless of what format the source and target databases are in (document formats like JSON or XML; relational formats like SQL; graph formats like neo4j). This generality substantially expands the usability of Dynamite to a greater variety of users over the current state-of-the-art, which we demonstrated by migrating real-world databases like IMDB and DBLP across formats in a matter of minutes.

	My role in this data migration project has been threefold. Firstly, I implemented the actual database migrations given the value correspondence from the synthesized Datalog program. To do so, I wrote XML and JSON parsers robust to real-world files that are tens of gigabytes large, and wrote scalable transformers to turn the output of the Datalog program (a CSV file of data) into the final expected format (relational database, graph database, or document database format). Secondly, I was responsible for conducting the experiments with our tool to collect our empirical results. This work included preparing the server for the experiments, preprocessing the benchmarks to remove special characters from the source databases, writing the test for the end-to-end system, conducting the experiments, debugging any errors caused, and compiling the results for their presentation in the paper. Thirdly, I was responsible for drafting portions of the Related Work section. We are currently working on revisions to our paper while we await a final decision. 


Publications
[1] Synthesizing Database Applications for Schema Refactoring. Yuepeng Wang, James Dong, Rushi Shah, Isil Dillig. Programming Languages Design & Implementation (PLDI) 2019.
[2] Data Migration using Datalog Program Synthesis. Yuepeng Wang, Rushi Shah, Abby Criswell, Rong Pan, Isil Dillig. [In Submission] Very Large Databases (VLDB) 2020. 